Process Notes for Custom React Tooltip Component
==================================================



About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Phase 1: Starting a React app from scratch
==============================================================================================
* This is the basic setup for the react application. You dont really need to remove any files
  unless you want to (i.e. service worker, etc.), but this is just to prime the application for
  use for basic projects.
==============================================================================================

Step 1: In gitbash, run "npx create-react-app react-sandbox".
================================================================
  * This creates the react application (may take at least a few minutes).
  * When this is done installing, remember to cd into it since its in a nested folder.

Step 2: Run "npm install".
==========================
  * This is going to install all the dependencies form the create-react-app.

Step 3: Update content to create a minimal starting point for the application:
==============================================================================
  1. In ./src/App.js, replace what is there by default with this code:
    -------------------------------------------------------------------------
        import React from 'react';

        function App() {
          return (
            <main className='App'>
              {/* content goes here */}
            </main>
          );
        }

        export default App;
    -------------------------------------------------------------------------

Step 4: In ./src/index.js, replace what is there by defualt with the following code:
====================================================================================
    -------------------------------------------------------------------------
        import React from 'react';
        import ReactDOM from 'react-dom';
        import App from './App';
        import './index.css';

        ReactDOM.render(<App />, document.getElementById('root'));  
    -------------------------------------------------------------------------






  Phase 2: Setup for custom components:
  ====================================================================================
  * With any custom component you make, you will want to store them in a new composition
    folder inside the src file.
  ====================================================================================

  Step 1: Create a composition file
    -------------------------------------------------------------------------
      src  >  composition
    -------------------------------------------------------------------------






Phase 3: Create a custom component:
========================================================================================
* From here on, you can create as many custom components as you want. The sequence to
  creating custom components is usually the same:
========================================================================================
      1. Create a .js component file.
      2. Inside, create 3 things:
        #1: Import React
        #2: Create your custom component (remember to capitalize the name if it is a custom component).
        #3: export your component.
      3. Import you component to the file you wish to use it in.
      4. Create a component tag!






Phase 3: Create Component styling:
=========================================================================================
* For component styling, create a style sheet with the name of the component (or related
  components) in the folder you have the component in. In this case, custom components are
  going to have the .css files inside the composition file. So the sequence of getting 
  the styling connected to your components goes like this:
=========================================================================================
      1. Create a .css file for the component in the same folder as the component file.
      2. Import the .css file to the folder you use the component in.





Phase 4: Make your component configurable:
=========================================================================================
* To put configurability in context, here it means that in the App.js file, we want to use 
  the component but also use the text in App.js as well. We do this by using the props 
  object. What this means is that when we use the component, the children of that prop 
  (i.e. the text) are passed to the component (via the "props" parameter) so that they
  can be used in the specific context.
=========================================================================================
  1. In your component, pass "props" as a parameter.
    * This is going to allow you to access the children inside the components you are using this
      custom component in.
    * Use brackets when you access the props object.

    I. So in App where you are using your custom component, you have text that is considered "children".
      ---------------------------------------------------------------------------------
        function App() {
          return (
            <Split className="left">                                                   // Split component with child text.
              This is the child text that will be passed via props.
            </Split>
            <Split className="right">
              This is the child text that will be passed via props.
            </Split>
          )
        }
      ---------------------------------------------------------------------------------

      II. When you pass props to Split, you are essentially saying that you want to let split
      have access to the child text that is in the Split component instance already.
      ---------------------------------------------------------------------------------
        function Split(props) {                                                     // By passing "props" you access the props object....
          return (
            <div className="split">
              {props.children}                                                       // ... and pass the child text through via props.children.
            </div>
          )
        }
      ---------------------------------------------------------------------------------

      III. HOWEVER... you can also make attributes such as classNames configurable as well.
           To make these attributes configurable, you need to create a variable can apply the
           stylizations that already exist for your component (i.e. "split") but also the 
           additional attibutes that exist outside this component (i.e. "left" and "right").
           To do this, you need to use a template literal and access the props.className prop.
        ---------------------------------------------------------------------------------
          function Split(props) {
            const combinedClassName = `split ${props.className}`;                              // variable that access the className prop.
            return (
              <div className={combinedClassName}>                                              // and use it for the className attibute.
                {props.children}                                                       
              </div>
            );
          }

        ---------------------------------------------------------------------------------




Tooltip Phase
==========================================================================================
* So the above Phases are about project setup and setting up a basic component for use. For
  the objective of this study, we want to create a tool tip component that will reveal a 
  tip when the user hovers over it.
==========================================================================================

1. Create a Tooltip.js file:
  --------------------------------------------------------------
      Tooltip.js
  --------------------------------------------------------------

2. Add Tooltip logic:
  -------------------------------------------------------------------------
      import React from 'react';
      import './Tooltip.css';                                                // import css file for Tooltip.

      function Tooltip(props) {
        return (
          <span className="Tooltip">                                           
            <span className="Tooltop-content">                               // Word that will reveal word on hover.
              {props.children}
            </span>
            <div className="Tooltip-message">                                // message on hover.
              {props.message}
            </div> 
          </span>
        );
      }

      export default Tooltip;
  -------------------------------------------------------------------------

  3. Import Tooltip.js and Tooltip.css to App.js and use inside a component.
    ------------------------------------------------------------------------------------------------------
        import React from 'react';
        import Split from './composition/Split';
        import Tooltip from './composition/Tooltip';
        import './App.css';

        const firstTooltip = (                                                                                // Tooltip variable "firstTooltip"
          <Tooltip message='tooltip message'>
          ipsum
          </Tooltip>
        )
        const secondTooltip = (                                                    
          <Tooltip message='another tooltip message'>
            officiis
          </Tooltip>
        )

        function App() {
          return (
            <main className='App'>
              <Split className='left' flexBasis='2'> 
                This is the content for the left Split. Lorem {firstTooltip} dolor sit                       // "firstTooltip" used inside component.
                amet consectetur, adipisicing elit. Incidunt ex velit suscipit facere officia?<br />
              </Split>
              <Split className='right'>
                This is the content for the right Split. Inventore aliquid cupiditate suscipit repellat. 
                Quaerat quis {secondTooltip} quam fuga. Aliquid quo possimus id soluta aspernatur.               
              </Split>
            </main>
          )
        }

        export default App;
    ----------------------------------------------------------------------------------------------------------

===============================
HOW DO YOU USE INLINE STYLING
==============================
  4. Customizing Tooltip further:
    * You can customize components further with props and inline-styling.

    I. To Use INLINE STYLING, you simply need to add the additional attribute to your element.
       Normally you would want to use className, but in this case, you just add the attribute with
      double brackets, one for the JSX insertion and the second for the css property. 

    -------------------------------------------------------------------------------------
        function Tooltip(props) {
          return (
            <span className="Tooltip">                                                
              <span className="Tooltip-content" style={{ color: props.color }}>              // added in-line style property
                {props.children}
              </span>
              <div className="Tooltip-message">                                      
                {props.message}
              </div>
            </span>
          );
        }
    -------------------------------------------------------------------------------------

    II. Then to add the inline styling from above to the component, simply add the "color" attribute to the
        special variables you created in the primary App component. In this case, we can add the color name or
        a hexcode (i.e. color='#126BCC')
        ------------------------------------------------------------------------------------
            const firstTooltip = (                                                         
              <Tooltip color='hotpink' message='tooltip message'>                             // added color attribute
                ipsum 
              </Tooltip>
            )
        ------------------------------------------------------------------------------------



================================
What are React Class Components
================================

On Class components (to use defaultProps):
  * Classes are a standard ES6 feature so that you can make React components with extra features.
  * Inner workings aside, the syntax for creating classes is useful to know at this point.
  
===============================
How to create a class component
================================
1. Add a class between the exisitng component function and the export default line:
  * In the case of the Tooltip component, we want to create a TooltipClass.
  ----------------------------------------------------------------------------------------------
    function Tooltip(props) {
      return (
        <span className="Tooltip" >                                                
          <span className="Tooltip-content">
            {props.children}
          </span>
          <div className="Tooltip-message" style={{ color: props.color }}>                                      
            {props.message}
          </div>
        </span>
      );
    }

    class TooltipClass extends React.Component {}                                                      // TooltipClass class component.

    export default Tooltip;
  ----------------------------------------------------------------------------------------------

2. "Render" is the same as a functional component 
  * Classes are similar to object as they contain methods. 
  * React class components need a method called "render" (and this is the ONLY method required for React class components).
  * The render method is similar to function components.
  * You "return" JSX to define what the component will look like.
  * The difference between "render()" and "function Component()" is how props work. In a function component, props are
    a parameter, but in class, props are NOT parameters anymore but accessed through this.props.

  Compare a function component to a class component:

  A function component looks like this:
  -------------------------------------------------------------------------------------------------
    function FunctionComponent(props) {                                                             // pass props parameter.
      return (
        <span>{props.children}</span>                                                                // use props.children.
      );
    }
  -------------------------------------------------------------------------------------------------  
  
  A class component looks like this:
  ------------------------------------------------------------------------------------------------
    class TooltipClass extends React.Component {
      render() {
        return <span>{this.props.children}</span>                                                    // use this.props.children.
      }
    } 
  ------------------------------------------------------------------------------------------------

  This is a comparison of the class components and the functional components:
    -------------------------------------------------------------------------------------------
        function Tooltip(props) {                                                              // props passed to the function component.
          return (
            <span className="Tooltip" >                                                
              <span className="Tooltip-content">
                {props.children}                                                               //... and accessed via the props object.
              </span>
              <div className="Tooltip-message" style={{ color: props.color }}>                                      
                {props.message}
              </div>
            </span>
          );
        }

        class TooltipClass extends React.Component {                                            // class component...
          render() {                                                                            // ... that renders the JSX (i.e. "return")
            return (                                                                            // ... and then returns the JSX
              <span className='Tooltip'>
                <span className='Tooltip-content'>
                  {this.props.children}                                                         // props are accessed via this.props.children
                </span>
                <div className='Tooltip-message' style={{ color: this.props.color }}>
                  {this.props.message}
                </div>
              </span>
            )
          }
        }

    -------------------------------------------------------------------------------------------

===========================
What are default props?
===========================
3. Add a default prop before render with the property "static defaultProps" and assign an object to that property.
   The keys of that object are the props you want to have defaults for and the values are the default values you want to assign.
   The defaultProp is used if no equivalent default value is supplied.
   ---------------------------------------------------------------------------------------------
        class TooltipClass extends React.Component {
          static defaultProps = {                                                                  // default prop added.
            color: 'red', // green
          };
          render() {
            console.log('Using a class component!')
            console.log(this.props)
            return (
              <span className='Tooltip'>
                <span className='Tooltip-content'>
                  {this.props.children}
                </span>
                <div className='Tooltip-message' style={{ color: this.props.color }}>
                  {this.props.message}
                </div>
              </span>
            )
          }
        }

   ---------------------------------------------------------------------------------------------


4. Make sure you have the right exportation for the component.
  -------------------------------------------------------------------------------------------
      export default TooltipClass;
  -------------------------------------------------------------------------------------------





=============================
What is composition?
=============================
* Composition is the approach of arranging components within or next to each other.
* Using composition, multiple components can be combined into one new component.
* Components are like branches on a tree where each branch contains zero or more branches branching off from it, so one component can have
  0 or more components branching from it.
* The component branches be considered "sub-trees" which would be a new component with its own internal tree of branches.

For example, suppose you had the App component.
  * div, h1, p, and CustomComponent are the "branches" that makup a tree called "App".
  ------------------------------------------------------------
    function App() {
      return (
        <div>
          <h1 />
          <p />
          <CustomComponent />
        </div>
      )
    }
  ------------------------------------------------------------
The tree would look like this:
  ------------------------------------------------------------
         h1      p    CustomComponent     
          |______|______|
                 |
                div
                 |
                App
  ------------------------------------------------------------
And CustomComponent would have its own tree.
  -----------------------------------------------------------
        li             li
         |_____________|
                |
                ul
                |
          CustomComponent
  -----------------------------------------------------------